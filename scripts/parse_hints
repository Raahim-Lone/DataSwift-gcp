def configure_environment():
    """Dynamically set up sys.path to include the project root."""
    import sys
    import os

    # Dynamically determine the project root and add it to sys.path
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    scripts_path = os.path.join(project_root, "scripts")

    # Remove conflicting paths
    if scripts_path in sys.path:
        sys.path.remove(scripts_path)

    # Add project root to sys.path
    if project_root not in sys.path:
        sys.path.insert(0, project_root)

# Call environment setup before importing anything from src
configure_environment()

import os
import pandas as pd
import argparse
from src.utils.logger import setup_logger
from src.utils.config_manager import load_config
import logging
import numpy as np  # Import NumPy for saving as npz

# Define the known hints with unique integer assignments from 1–48 (assuming 48 hints)
# Update this mapping according to your actual 48 hints
HINT_MAPPING = {
    "hashjoin": 1,
    "indexonlyscan": 2,
    "indexscan": 3,
    "mergejoin": 4,
    "nestloop": 5,
    "seqscan": 6,
    # ... add up to 48 hints
}

ALL_HINTS = list(HINT_MAPPING.keys())

def encode_hint(hint_str):
    """
    Encode hints by assigning unique numbers to each enabled hint.
    If a hint is present, assign its unique number; else assign 0.
    """
    hints_present = hint_str.strip().lower().split(",")
    vector = []
    for hint in ALL_HINTS:
        if hint in hints_present:
            vector.append(float(HINT_MAPPING[hint]))
        else:
            # If not present, use 0.0 (no negative or -1)
            vector.append(0.0)
    return vector

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--config", type=str, default="config/default_config.yaml")
    args = parser.parse_args()

    config = load_config(args.config)
    logger = setup_logger(__name__, config["logging"]["log_file"],
                          level=getattr(logging, config["logging"]["log_level"]))

    hint_path = config["database"]["hint_path"]
    processed_path = config["paths"]["processed_features"]
    os.makedirs(processed_path, exist_ok=True)

    hints_file = os.path.join(hint_path, "hints.txt")
    hints = []

    if os.path.exists(hints_file):
        with open(hints_file, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if line:
                    vec = encode_hint(line)
                    hints.append(vec)
        if not hints:
            logger.warning("hints.txt is empty. Proceeding with zero vectors for all features.")
    else:
        logger.warning("No hints.txt found. Proceeding with zero vectors for all features.")

    # Append the "no hints" configuration as a zero vector
    zero_vector = [0.0] * len(ALL_HINTS)
    hints.append(zero_vector)
    logger.info("Added 'no hints' configuration as a zero vector.")

    columns = ALL_HINTS
    df_hints = pd.DataFrame(hints, columns=columns)

    # Save as Parquet (optional, you can remove this if not needed)
    parquet_output_file = os.path.join(processed_path, "Y.parquet")  # or your desired output name
    df_hints.to_parquet(parquet_output_file, index=False)
    logger.info(f"Saved hint features to {parquet_output_file}")

    # Save as NPZ
    npz_output_file = os.path.join(processed_path, "Y.npz")
    np.savez_compressed(npz_output_file, Y=df_hints.values, columns=np.array(columns))
    logger.info(f"Saved hint features to {npz_output_file}")

'''
def configure_environment():
    """Dynamically set up sys.path to include the project root."""
    import sys
    import os

    # Dynamically determine the project root and add it to sys.path
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    scripts_path = os.path.join(project_root, "scripts")

    # Remove conflicting paths
    if scripts_path in sys.path:
        sys.path.remove(scripts_path)

    # Add project root to sys.path
    if project_root not in sys.path:
        sys.path.insert(0, project_root)

# Call environment setup before importing anything from src
configure_environment()

import os
import pandas as pd
import argparse
from src.utils.logger import setup_logger
from src.utils.config_manager import load_config
import logging
import numpy as np  # Import NumPy for saving as npz

# Define the known hints with unique integer assignments from 1–6
HINT_MAPPING = {
    "hashjoin": 1,
    "indexonlyscan": 2,
    "indexscan": 3,
    "mergejoin": 4,
    "nestloop": 5,
    "seqscan": 6
}

ALL_HINTS = list(HINT_MAPPING.keys())

def encode_hint(hint_str):
    """
    Encode hints by assigning unique numbers to each enabled hint.
    If a hint is present, assign its unique number; else assign 0.
    """
    hints_present = hint_str.strip().lower().split(",")
    vector = []
    for hint in ALL_HINTS:
        if hint in hints_present:
            vector.append(float(HINT_MAPPING[hint]))
        else:
            # If not present, use 0.0 (no negative or -1)
            vector.append(0.0)
    return vector

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--config", type=str, default="config/default_config.yaml")
    args = parser.parse_args()

    config = load_config(args.config)
    logger = setup_logger(__name__, config["logging"]["log_file"],
                          level=getattr(logging, config["logging"]["log_level"]))

    hint_path = config["database"]["hint_path"]
    processed_path = config["paths"]["processed_features"]
    os.makedirs(processed_path, exist_ok=True)

    hints_file = os.path.join(hint_path, "hints.txt")
    if not os.path.exists(hints_file):
        logger.warning("No hints.txt found.")
        exit(0)

    hints = []
    with open(hints_file, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line:
                vec = encode_hint(line)
                hints.append(vec)

    if not hints:
        logger.warning("No hints parsed.")
        exit(0)

    columns = ALL_HINTS
    df_hints = pd.DataFrame(hints, columns=columns)
    
    # Save as Parquet (optional, you can remove this if not needed)
    parquet_output_file = os.path.join(processed_path, "Y.parquet")  # or your desired output name
    df_hints.to_parquet(parquet_output_file, index=False)
    logger.info(f"Saved hint features to {parquet_output_file}")

    # Save as NPZ
    npz_output_file = os.path.join(processed_path, "Y.npz")
    np.savez_compressed(npz_output_file, Y=df_hints.values, columns=np.array(columns))
    logger.info(f"Saved hint features to {npz_output_file}")
'''