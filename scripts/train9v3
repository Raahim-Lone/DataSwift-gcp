#!/usr/bin/env python3
"""
GN-IMC launcher
================
Loads:
  • Wnew.npy   – full data matrix (observed values on Ω, 0 elsewhere)
  • Mnew.npy   – 0/1 mask Ω
  • X_scalednew.npz → key "X" – side information A
  • Y_scalednew.npz → key "Y" – side information B
Creates Ω as CSR once, then calls GNIMC.
"""

# ------------------------------------------------------------------
# 0) Standard libs
# ------------------------------------------------------------------
import numpy as np
from scipy import sparse
from scipy.sparse import linalg as sp_linalg

# ------------------------------------------------------------------
# 1) Tiny enum for the init option (replaces external import)
# ------------------------------------------------------------------
INIT_WITH_SVD        = 0
INIT_WITH_RANDOM     = 1
INIT_WITH_USER_DEFINED = 2

# ------------------------------------------------------------------
# 2) >>>>>>>>>  GNIMC IMPLEMENTATION  <<<<<<<<<
#     (identical to the code you pasted, only “import” lines trimmed)
# ------------------------------------------------------------------
def GNIMC(X, omega, rank, A, B, verbose=True, alpha=-1, perform_qr=True,
          max_outer_iter=100, max_inner_iter_init=10, max_inner_iter_final=1000,
          lsqr_inner_init_tol=1e-15, lsqr_smart_tol=True, lsqr_smart_obj_min=1e-5,
          init_option=INIT_WITH_SVD, init_U=None, init_V=None,
          stop_relRes=1e-14, stop_relDiff=-1, stop_relResDiff=-1):

    # ------------------------------------------------------------------
    # NEW: robust handling for sparse vs. dense mask
    # ------------------------------------------------------------------
    if sparse.issparse(omega):
        m = omega.nnz                 # number of observed entries
        I, J = omega.nonzero()        # row and col indices (1-D arrays)
    else:
        m = np.count_nonzero(omega)
        I, J = np.nonzero(omega)
    # ------------------------------------------------------------------

    n1, n2 = X.shape
    d1 = A.shape[1]
    d2 = B.shape[1]
    p = m / (n1 * n2)
    I, J, _ = sparse.find(omega)

    # initial estimate
    if init_option == INIT_WITH_SVD:
        L, S, R = sp_linalg.svds(X / p, k=rank, tol=1e-16)
        U = A.T @ L @ np.diag(np.sqrt(S))
        V = B.T @ R.T @ np.diag(np.sqrt(S))
    elif init_option == INIT_WITH_RANDOM:
        U = np.random.randn(d1, rank)
        V = np.random.randn(d2, rank)
        U = np.linalg.qr(U)[0]
        V = np.linalg.qr(V)[0]
    else:
        U = init_U
        V = init_V

    AU_omega_rows = A[I, :] @ U
    BV_omega_cols = B[J, :] @ V

    x = X[I, J]
    X_norm = np.linalg.norm(x)

    early_stopping_flag = False
    relRes = float("inf")
    all_relRes = [relRes]
    best_relRes = float("inf")
    U_best = U
    V_best = V
    x_hat = np.sum(AU_omega_rows * BV_omega_cols, 1)
    x_hat_prev = x_hat

    iter_num = 0
    while iter_num < max_outer_iter and not early_stopping_flag:
        iter_num += 1

        # ---- build LSQR system ----
        if perform_qr:
            U_Q, U_R = np.linalg.qr(U)
            V_Q, V_R = np.linalg.qr(V)
            AU_for_use = A[I, :] @ U_Q
            BV_for_use = B[J, :] @ V_Q
        else:
            AU_for_use = AU_omega_rows
            BV_for_use = BV_omega_cols

        L1 = generate_product_matrix(A[I, :], BV_for_use.T)
        L2 = generate_product_matrix(AU_for_use, B[J, :].T)
        L = sparse.csr_matrix(np.concatenate((L1, L2), axis=1))

        # ---- LSQR right-hand-side ----
        b = x + alpha * np.sum(AU_omega_rows * BV_omega_cols, 1)

        # ---- choose solver tolerances ----
        lsqr_tol = lsqr_inner_init_tol
        lsqr_iters = max_inner_iter_init
        if lsqr_smart_tol and relRes < lsqr_smart_obj_min:
            lsqr_tol = min(lsqr_tol, relRes ** 2)
            lsqr_iters = max_inner_iter_final

        # ---- solve ----
        z = sp_linalg.lsqr(L, b, atol=lsqr_tol, btol=lsqr_tol,
                           iter_lim=lsqr_iters)[0]

        # ---- reshape, QR-correct, update ----
        U_tilde = np.reshape(z[:d1 * rank], (d1, rank))
        V_tilde = np.reshape(z[d1 * rank:], (rank, d2)).T
        if perform_qr:
            U_tilde = U_tilde @ np.linalg.inv(V_R).T
            V_tilde = V_tilde @ np.linalg.inv(U_R).T

        U = 0.5 * (1 - alpha) * U + U_tilde
        V = 0.5 * (1 - alpha) * V + V_tilde
        AU_omega_rows = A[I, :] @ U
        BV_omega_cols = B[J, :] @ V

        x_hat = np.sum(AU_omega_rows * BV_omega_cols, 1)
        relRes = np.linalg.norm(x_hat - x) / X_norm
        all_relRes.append(relRes)

        if relRes < best_relRes:
            best_relRes = relRes
            U_best = U
            V_best = V

        x_hat_diff = np.linalg.norm(x_hat - x_hat_prev) / np.linalg.norm(x_hat)
        x_hat_prev = x_hat

        if verbose:
            print(f"[GNIMC] iter {iter_num:3d} | relRes = {relRes:.3e}")

        # early-stopping guards
        if stop_relRes > 0 and relRes < stop_relRes:
            early_stopping_flag = True
        if stop_relDiff > 0 and x_hat_diff < stop_relDiff:
            early_stopping_flag = True
        if stop_relResDiff > 0 and abs(relRes / all_relRes[-2] - 1) < stop_relResDiff:
            early_stopping_flag = True

    convergence_flag = iter_num < max_outer_iter
    X_hat = A @ U_best @ V_best.T @ B.T
    return X_hat, iter_num, convergence_flag, all_relRes


def generate_product_matrix(A, B):
    """Return M such that  vec(A C B) = M vec(C) ."""
    assert A.shape[0] == B.shape[1], "dimension mismatch"
    m = A.shape[0]
    M = np.zeros((m, A.shape[1] * B.shape[0]))
    for i in range(m):
        M[i, :] = np.outer(A[i, :], B[:, i]).ravel()
    return M


# ------------------------------------------------------------------
# 3) Configure paths
# ------------------------------------------------------------------
PATH_W = "/Users/raahimlone/New_Data/Wnew.npy"
PATH_M = "/Users/raahimlone/New_Data/Mnew.npy"
PATH_A = "/Users/raahimlone/New_Data/X_scalednew.npz"
PATH_B = "/Users/raahimlone/New_Data/Y_scalednew.npz"

# ------------------------------------------------------------------
# 4) Load matrices
# ------------------------------------------------------------------
print("📂  Loading matrices …")
W = np.load(PATH_W)             # (n1, n2)
M = np.load(PATH_M)             # (n1, n2) 0/1
A = np.load(PATH_A)["X"]        # (n1, d1)
B = np.load(PATH_B)["Y"]        # (n2, d2)

assert W.shape == M.shape,  "W and M shapes mismatch"
assert A.shape[0] == W.shape[0], "A rows ≠ W rows"
assert B.shape[0] == W.shape[1], "B rows ≠ W cols"

omega = sparse.csr_matrix(M)

print("✅  Matrices ready:")
print(f"      W shape: {W.shape} | observed = {np.count_nonzero(M)}")
print(f"      A shape: {A.shape}")
print(f"      B shape: {B.shape}")

# ------------------------------------------------------------------
# 5) Run GN-IMC
# ------------------------------------------------------------------
rank = 6  # latent rank
print(f"\n🚀  Running GNIMC with rank = {rank} …\n")

X_hat, iters, converged, rel_hist = GNIMC(
    X=W,
    omega=omega,
    rank=rank,
    A=A,
    B=B,
    verbose=True
)

print("\n🎉  Done!")
print(f"Iterations           : {iters}")
print(f"Converged?           : {converged}")
print(f"Final relative error : {rel_hist[-1]:.3e}")
