import os
import psycopg2
import pandas as pd
import json
import re
from psycopg2 import sql

# Configuration
DB_CONFIG = {
    'dbname': 'IMDB',
    'user': 'postgres',       # Replace with your PostgreSQL username
    'password': 'raahimlhere',   # Replace with your PostgreSQL password
    'host': 'localhost',           # Replace if your DB is hosted elsewhere
    'port': '6543',                # Default PostgreSQL port
}

QUERIES_DIR = '/Users/raahimlone/imdb_pg_dataset-1'
HINTS_FILE = '/Users/raahimlone/project_root/hints.json'
OUTPUT_CSV = '/Users/raahimlone/rahhh/Data_Gathering/query_latency_testrah.csv'

def load_queries(directory):
    queries = {}
    for filename in os.listdir(directory):
        if filename.endswith('.sql'):
            path = os.path.join(directory, filename)
            with open(path, 'r') as file:
                queries[filename] = file.read()
    return queries

def load_hints(file_path):
    if not os.path.exists(file_path):
        print(f"Hints file '{file_path}' does not exist. Proceeding without hints.")
        return {}
    with open(file_path, 'r') as file:
        hints = json.load(file)
    return hints

def set_configurations(cursor, configurations):
    for param, value in configurations.items():
        set_command = sql.SQL("SET {} TO %s;").format(sql.Identifier(param))
        cursor.execute(set_command, [value])

def reset_configurations(cursor):
    cursor.execute("RESET ALL;")

def execute_explain_analyze(cursor, query):
    explain_query = f"EXPLAIN (ANALYZE, VERBOSE, BUFFERS) {query}"
    cursor.execute(explain_query)
    explain_output = cursor.fetchall()
    explain_text = "\n".join([row[0] for row in explain_output])
    latency = parse_explain_analyze(explain_text)
    return latency, explain_text  # Return explain_text for potential debugging

def parse_explain_analyze(explain_text):
    """
    Parses the output of EXPLAIN ANALYZE to extract the total execution time.
    """
    match = re.search(r"Execution Time:\s+([\d\.]+)\s+ms", explain_text)
    if match:
        total_time = float(match.group(1)) / 1000  # Convert ms to seconds
        return total_time
    else:
        return None

def main():
    # Load queries and hints
    queries = load_queries(QUERIES_DIR)
    hints = load_hints(HINTS_FILE)

    # Prepare results storage
    results = []

    # Connect to the PostgreSQL database
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = True
        cursor = conn.cursor()
    except Exception as e:
        print(f"Error connecting to the database: {e}")
        return

    # Iterate over each query
    for q_name, query in queries.items():
        print(f"\nExecuting query: {q_name}")

        # 1. Execute without any hints
        try:
            # Ensure configurations are reset before running without hints
            reset_configurations(cursor)

            # Execute and measure latency using EXPLAIN ANALYZE
            latency_pg, explain_text = execute_explain_analyze(cursor, query)

            if latency_pg is not None:
                print(f"  [no_hint] PostgreSQL Timing: {latency_pg:.4f} seconds")
            else:
                print("  [no_hint] PostgreSQL Timing: Could not parse execution time.")

            # Store the results
            results.append({
                'query': q_name,
                'hint': 'no_hint',
                'latency_postgresql_seconds': latency_pg,
                'error': None
            })

        except Exception as e:
            print(f"  [no_hint] Error executing {q_name}: {e}")
            results.append({
                'query': q_name,
                'hint': 'no_hint',
                'latency_postgresql_seconds': None,
                'error': str(e)
            })
        finally:
            # Reset configurations after running without hints
            try:
                reset_configurations(cursor)
            except Exception as reset_err:
                print(f"  [no_hint] Error resetting configurations: {reset_err}")

        # 2. Execute with each hint
        for h_name, configurations in hints.items():
            try:
                # Apply configurations
                set_configurations(cursor, configurations)

                # Execute and measure latency using EXPLAIN ANALYZE
                latency_pg = execute_explain_analyze(cursor, query)[0]

                if latency_pg is not None:
                    print(f"  [{h_name}] PostgreSQL Timing: {latency_pg:.4f} seconds")
                else:
                    print(f"  [{h_name}] PostgreSQL Timing: Could not parse execution time.")

                # Store the results
                results.append({
                    'query': q_name,
                    'hint': h_name,
                    'latency_postgresql_seconds': latency_pg,
                    'error': None
                })

            except Exception as e:
                print(f"  [{h_name}] Error executing {q_name}: {e}")
                results.append({
                    'query': q_name,
                    'hint': h_name,
                    'latency_postgresql_seconds': None,
                    'error': str(e)
                })
            finally:
                # Reset configurations after each hint
                try:
                    reset_configurations(cursor)
                except Exception as reset_err:
                    print(f"  [{h_name}] Error resetting configurations: {reset_err}")

    # Close the database connection
    cursor.close()
    conn.close()

    # Save results to CSV
    df = pd.DataFrame(results)
    df.to_csv(OUTPUT_CSV, index=False)
    print(f"\nResults saved to {OUTPUT_CSV}")

if __name__ == "__main__":
    main()
