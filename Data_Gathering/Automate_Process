import os
import psycopg2
import time
import pandas as pd
import json

# Configuration
DB_CONFIG = {
    'dbname': 'IMDB',
    'user': 'postgres',       # Replace with your PostgreSQL username
    'password': 'raahimlhere',   # Replace with your PostgreSQL password
    'host': 'localhost',           # Replace if your DB is hosted elsewhere
    'port': '6543',                # Default PostgreSQL port
}

QUERIES_DIR = '/Users/raahimlone/project_root/Data_Gathering/raw_sql_queries'
HINTS_FILE = '/Users/raahimlone/project_root/Data_Gathering/hints.json'
OUTPUT_CSV = '/Users/raahimlone/project_root/Data_Gathering/query_latency_results2.csv'

def load_queries(directory):
    queries = {}
    for filename in os.listdir(directory):
        if filename.endswith('.sql'):
            path = os.path.join(directory, filename)
            with open(path, 'r') as file:
                queries[filename] = file.read()
    return queries

def load_hints(file_path):
    with open(file_path, 'r') as file:
        hints = json.load(file)
    return hints

def set_configurations(cursor, configurations):
    for param, value in configurations.items():
        set_command = f"SET {param} TO '{value}';"
        cursor.execute(set_command)

def reset_configurations(cursor):
    cursor.execute("RESET ALL;")

def execute_query(cursor, query):
    start_time = time.time()
    cursor.execute(query)
    # Optionally fetch results to ensure the query is fully executed
    try:
        cursor.fetchall()
    except psycopg2.ProgrammingError:
        # No results to fetch
        pass
    end_time = time.time()
    latency = end_time - start_time
    return latency

def main():
    print("Script started")
    # Load queries and hints
    queries = load_queries(QUERIES_DIR)
    hints = load_hints(HINTS_FILE)

    # Prepare results storage
    results = []

    # Connect to the PostgreSQL database
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = True
        cursor = conn.cursor()
    except Exception as e:
        print(f"Error connecting to the database: {e}")
        return

    # Iterate over each query and hint
    for q_name, query in queries.items():
        for h_name, configurations in hints.items():
            try:
                # Apply configurations
                set_configurations(cursor, configurations)

                # Execute the query and measure latency
                latency = execute_query(cursor, query)
                print(f"Executed {q_name} with {h_name}: {latency:.4f} seconds")

                # Store the result
                results.append({
                    'query': q_name,
                    'hint': h_name,
                    'latency_seconds': latency,
                    'error': None
                })

                # Reset configurations
                reset_configurations(cursor)

            except Exception as e:
                print(f"Error executing {q_name} with {h_name}: {e}")
                results.append({
                    'query': q_name,
                    'hint': h_name,
                    'latency_seconds': None,
                    'error': str(e)
                })
                # Attempt to reset configurations even if there's an error
                try:
                    reset_configurations(cursor)
                except:
                    pass

    # Close the database connection
    cursor.close()
    conn.close()

    # Save results to CSV
    df = pd.DataFrame(results)
    df.to_csv(OUTPUT_CSV, index=False)
    print(f"Results saved to {OUTPUT_CSV}")

if __name__ == "__main__":
    main()
