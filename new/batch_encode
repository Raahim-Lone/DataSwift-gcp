#!/usr/bin/env python3
"""
plan2vec.py

Driver script to batch-encode parsed plans into 256-dim embeddings
using your Plan2VecEncoder. Supports input Data objects saved as .pt files.

Usage:
  python plan2vec.py \
    --input_dir ~/Downloads/parsed_dsb \
    --output_dir ~/Downloads/plan_embeddings \
    --model_ckpt ~/models/plan2vec_ckpt.pt \
    [--device cuda]
"""
import os
import sys
import argparse

import torch
import numpy as np
def configure_environment():
    """Dynamically set up sys.path to include the project root."""
    import sys
    import os

    # Dynamically determine the project root and add it to sys.path
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    scripts_path = os.path.join(project_root, "scripts")

    # Remove conflicting paths
    if scripts_path in sys.path:
        sys.path.remove(scripts_path)

    # Add project root to sys.path
    if project_root not in sys.path:
        sys.path.insert(0, project_root)

# Call environment setup before importing anything from `src`
configure_environment()

from modules.plan2vec import Plan2VecEncoder


def main(input_dir: str, output_dir: str, model_ckpt: str, device: str):
    # Debug: paths and existence
    print(f"[DEBUG] Input directory: {input_dir}")
    if not os.path.isdir(input_dir):
        print(f"[ERROR] Input directory does not exist: {input_dir}")
        sys.exit(1)

    print(f"[DEBUG] Output directory: {output_dir}")
    os.makedirs(output_dir, exist_ok=True)

    print(f"[DEBUG] Checkpoint path: {model_ckpt}")
    ckpt_exists = os.path.exists(model_ckpt)
    print(f"[DEBUG] Checkpoint exists: {ckpt_exists}")

    # 1) Prepare device & model
    dev = torch.device(device if (device == 'cuda' and torch.cuda.is_available()) else 'cpu')
    encoder = Plan2VecEncoder()
    if ckpt_exists:
        try:
            encoder = Plan2VecEncoder.from_pretrained(model_ckpt)
            print(f"✅ Loaded encoder from checkpoint: {model_ckpt}")
        except Exception as e:
            print(f"[ERROR] Failed to load checkpoint: {e}")
            print("[DEBUG] Using fresh encoder instead.")
    else:
        print("⚠️  No checkpoint found; using fresh Plan2VecEncoder")

    encoder = encoder.to(dev).eval()

    # 2) Collect .pt Data files
    pt_files = []
    for root, _, files in os.walk(input_dir):
        for fn in files:
            if fn.lower().endswith('.pt'):
                pt_files.append(os.path.join(root, fn))
    print(f"[DEBUG] Found {len(pt_files)} .pt files to process")
    if not pt_files:
        print("[ERROR] No .pt Data files found in input directory. Exiting.")
        return

    # 3) Process each Data file
    for in_path in pt_files:
        rel_dir = os.path.relpath(os.path.dirname(in_path), input_dir)
        out_subdir = os.path.join(output_dir, rel_dir)
        os.makedirs(out_subdir, exist_ok=True)

        base = os.path.splitext(os.path.basename(in_path))[0]
        out_path = os.path.join(out_subdir, base + '.npy')
        print(f"[DEBUG] Loading {in_path} -> {out_path}")

        # load Data object (allow full deserialization)
        try:
            # torch.load defaults to weights_only=True in PyTorch ≥2.6; switch off to load custom classes
            data = torch.load(in_path, weights_only=False)
        except TypeError:
            # older PyTorch versions ignore weights_only arg
            data = torch.load(in_path)
        except Exception as e:
            print(f"[ERROR] Failed to load Data from {in_path}: {e}")
            continue
        except Exception as e:
            print(f"[ERROR] Failed to load Data from {in_path}: {e}")
            continue

        # ensure on device
        data = data.to(dev)

        # encode
        try:
            with torch.no_grad():
                z = encoder(data)  # Tensor [out_dim]
        except Exception as e:
            print(f"[ERROR] Encoding failed for {in_path}: {e}")
            continue

        # save embedding
        arr = z.cpu().numpy()
        try:
            np.save(out_path, arr)
            print(f"✅ Saved embedding to {out_path}")
        except Exception as e:
            print(f"[ERROR] Failed to save embedding for {in_path}: {e}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Batch-encode parsed plan Data objects with Plan2VecEncoder"
    )
    parser.add_argument("--input_dir", required=True,
                        help="Root folder of your .pt Data files")
    parser.add_argument("--output_dir", required=True,
                        help="Where to write .npy embedding files")
    parser.add_argument("--model_ckpt", required=True,
                        help="Path to plan2vec checkpoint (or fresh if missing)")
    parser.add_argument("--device", default="cpu",
                        help="‘cuda’ or ‘cpu’; uses cuda only if available")
    args = parser.parse_args()
    main(args.input_dir, args.output_dir, args.model_ckpt, args.device)
